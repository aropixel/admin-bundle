<?php

namespace Aropixel\AdminBundle\Repository;

use Aropixel\AdminBundle\Domain\Entity\Image;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\File;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends EntityRepository
{


    public function getQueryDataTable($params) {

        //
        $qb = $this->createQueryBuilder('i');

        //
        if (strlen($params['search'])) {
            $qb->where($qb->expr()->orX(
                $qb->expr()->like('i.titre', ':search')
            ));
            $qb->setParameter('search', '%'.$params['search'].'%');
        }

        //
        $qb->orderBy('i.createdAt', 'DESC');

        return $qb;
    }

    /**
     * Compte le nombre d'images dans une catégorie
     *
     * @param string $category
     */
    public function count($category)
    {

        //
        $qb = $this->createQueryBuilder('i')
            ->select('COUNT(i)');

        //
        if ($category) {
            $qb->where('i.category = :category');
            $qb->setParameter('category', $category);
        }

        return $qb->getQuery()
            ->getSingleScalarResult();
    }


    /**
     * Import une image distante
     *
     * @param string $externalUrl
     */
    public function existRemoteImage($externalUrl)
    {
        //
        $ch = curl_init($externalUrl);
        curl_setopt($ch, CURLOPT_NOBODY, true);
        curl_exec($ch);

        // $retcode >= 400 -> not found, $retcode = 200, found.
        $retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        return $retcode==200;
    }


    /**
     * Verifie si une image distante a déjà été importée
     *
     * @param string $externalUrl
     */
    public function isAlreadyImported($externalUrl)
    {
        //
        $image = $this->findOneByImport($externalUrl);
        if ($image && $image->isNew())         $image->setIsNew(false);

        //
        return $image;
    }


    /**
     * Cherche une image dans une collection
     *
     * @param collection $collection
     */
    public function findIn($collection, $image)
    {
        foreach ($collection as $entity) {

            if (method_exists($entity, 'getImage')) {

                $_image = $entity->getImage();

                if ($_image == $image) {
                    return $entity;
                }
            }

        }

        return false;

    }


    /**
     * Import une image distante
     *
     * @param string $externalUrl
     */
    public function importRemoteImage($externalUrl, $category, $titre=false)
    {

        //
        if ($image = $this->isAlreadyImported($externalUrl)) {
            return $image;
        }

        //
        if (!$this->existRemoteImage($externalUrl)) {
            return false;
        }

        // Copie l'image dans un fichier temporaire
        set_time_limit(0);
        $tmp_path = tempnam(sys_get_temp_dir(), '');
        $tmp_fp = fopen($tmp_path, 'w+');
        $url_fp = fopen($externalUrl, 'r');
        stream_copy_to_stream($url_fp, $tmp_fp);


        // Initialise un objet File avec le ficher temporaire
        try {
            $file = new File($tmp_path);
        }
        catch (\Exception $e) {
            return false;
        }


        //
        $filename = sha1(uniqid(mt_rand(), true));
        $ext = $file->guessExtension();

        // Crée l'image en base de données
        $image = new Image();
        $image->setTitre($titre ?: $filename.'.'.$ext);
        $image->setFilename($filename.'.'.$ext);
        $image->setCategory($category);
        $image->setExtension($ext ? $ext : 'jpg');
        $image->setImport($externalUrl);
        $image->setIsNew(true);

        //
        $this->_em->persist($image);
        $this->_em->flush();

        //

        // Déplace le fichier dans l'arborescence images
        $file->move($image->getUploadRootDir(), $filename.'.'.$ext);

        return $image;
    }


    /**
     * Import une image distante
     *
     * @param string $externalUrl
     */
    public function importLocalImage($internalUrl, $category, $titre=false)
    {

        //
        if ($image = $this->isAlreadyImported($internalUrl)) {
            return $image;
        }

        //
        if (!file_exists($internalUrl)) {
            return false;
        }

        // Initialise un objet File avec le ficher temporaire
        try {
            $file = new File($internalUrl);
        }
        catch (\Exception $e) {
            return false;
        }


        //
        $filename = sha1(uniqid(mt_rand(), true));
        $ext = $file->guessExtension();

        // Crée l'image en base de données
        $image = new Image();
        $image->setTitre($titre ?: $filename.'.'.$ext);
        $image->setFilename($filename.'.'.$ext);
        $image->setCategory($category);
        $image->setExtension($ext ? $ext : 'jpg');
        $image->setImport($internalUrl);
        $image->setIsNew(true);

        //
        $this->_em->persist($image);
        $this->_em->flush();

        //
        $fs = new Filesystem();
        $fs->copy($internalUrl, $image->getUploadRootDir().'/'.$filename.'.'.$ext);
        // Déplace le fichier dans l'arborescence images
//        $file->copy($image->getUploadRootDir(), $filename.'.'.$ext);

        return $image;
    }

}
