<?php

namespace Aropixel\AdminBundle\Infrastructure\Media\Image\Library\Repository;

use Aropixel\AdminBundle\Domain\DataTable\DataTableContext;
use Aropixel\AdminBundle\Domain\Media\Image\Library\Repository\ImageRepositoryInterface;
use Aropixel\AdminBundle\Domain\Media\Resolver\ClassNameResolverInterface;
use Aropixel\AdminBundle\Entity\Image;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\File;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends ServiceEntityRepository implements ImageRepositoryInterface
{
    public function __construct(ManagerRegistry $registry, ClassNameResolverInterface $classNameResolver)
    {
        parent::__construct($registry, $classNameResolver->getImageClassName());
    }


    public function getQueryDataTable(DataTableContext $context)
    {
        $qb = $this->createQueryBuilder('i');

        if (strlen($context->getSearch())) {
            $qb->where($qb->expr()->orX(
                $qb->expr()->like('i.title', ':search')
            ));
            $qb->setParameter('search', '%'.$context->getSearch().'%');
        }

        $qb->orderBy('i.createdAt', 'DESC');
        return $qb;
    }


    public function getCategoryQueryDataTable(DataTableContext $context)
    {
        $qb = $this->getQueryDataTable($context);
        $qb
            ->andWhere('i.category = :category')
            ->setParameter('category', $context->getAdditionalParameter('category'))
        ;

        return $qb;
    }



    /**
     * Import une image distante
     */
    public function existRemoteImage(string $externalUrl)
    {
        $ch = curl_init($externalUrl);
        curl_setopt($ch, CURLOPT_NOBODY, true);
        curl_exec($ch);

        // $retcode >= 400 -> not found, $retcode = 200, found.
        $retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        return $retcode==200;
    }


    /**
     * Verifie si une image distante a déjà été importée
     */
    public function isAlreadyImported(string $externalUrl)
    {
        $image = $this->findOneByImport($externalUrl);
        if ($image && $image->isNew())         $image->setIsNew(false);

        return $image;
    }



    /**
     * Import une image distante
     */
    public function importRemoteImage(string $externalUrl, string $category, $title = false)
    {

        if ($image = $this->isAlreadyImported($externalUrl)) {
            return $image;
        }

        if (!$this->existRemoteImage($externalUrl)) {
            return false;
        }

        // Copie l'image dans un fichier temporaire
        set_time_limit(0);
        $tmp_path = tempnam(sys_get_temp_dir(), '');
        $tmp_fp = fopen($tmp_path, 'w+');
        $url_fp = fopen($externalUrl, 'r');
        stream_copy_to_stream($url_fp, $tmp_fp);


        // Initialise un objet File avec le ficher temporaire
        try {
            $file = new File($tmp_path);
        }
        catch (\Exception $e) {
            return false;
        }

        $filename = sha1(uniqid(mt_rand(), true));
        $ext = $file->guessExtension();

        // Crée l'image en base de données
        $image = new Image();
        $image->setTitle($title ?: $filename.'.'.$ext);
        $image->setFilename($filename.'.'.$ext);
        $image->setCategory($category);
        $image->setExtension($ext ? $ext : 'jpg');
        $image->setImport($externalUrl);
        $image->setIsNew(true);

        $this->_em->persist($image);
        $this->_em->flush();

        // Déplace le fichier dans l'arborescence images
        $file->move($image->getUploadRootDir(), $filename.'.'.$ext);

        return $image;
    }


    /**
     * Import une image distante
     */
    public function importLocalImage(string $internalUrl, string $category, $title=false)
    {

        if ($image = $this->isAlreadyImported($internalUrl)) {
            return $image;
        }

        if (!file_exists($internalUrl)) {
            return false;
        }

        // Initialise un objet File avec le ficher temporaire
        try {
            $file = new File($internalUrl);
        }
        catch (\Exception $e) {
            return false;
        }


        $filename = sha1(uniqid(mt_rand(), true));
        $ext = $file->guessExtension();

        // Crée l'image en base de données
        $image = new Image();
        $image->setTitle($title ?: $filename.'.'.$ext);
        $image->setFilename($filename.'.'.$ext);
        $image->setCategory($category);
        $image->setExtension($ext ? $ext : 'jpg');
        $image->setImport($internalUrl);
        $image->setIsNew(true);

        $this->_em->persist($image);
        $this->_em->flush();

        $fs = new Filesystem();
        $fs->copy($internalUrl, $image->getUploadRootDir().'/'.$filename.'.'.$ext);
        // Déplace le fichier dans l'arborescence images
//        $file->copy($image->getUploadRootDir(), $filename.'.'.$ext);

        return $image;
    }

}
